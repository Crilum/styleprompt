#!/bin/bash

version="v0.1.0-beta"

#Color Variables

NC='\e[0m'
BLACK='\e[0;30m'
RED='\e[0;31m'
GREEN='\e[0;32m'
WHITE='\e[1;37m'
ORANGE='\e[0;33m'
BLUE='\e[0;34m'
PURPLE='\e[0;35m'
CYAN='\e[0;36m'
YELLOW='\e[1;33m'
DARKPEACH='\033[38;2;255;152;99m'
DARKGRAY='\e[1;30m'

#Lighter Colors
LIGRAY='\e[0;37m'
LIGREEN='\e[1;32m'
LIRED='\e[1;31m'
LIBLUE='\e[1;34m'
LIPURPLE='\e[1;35m'
LICYAN='\e[1;36m'

#Background Color Variables

BACKBLACK='\e[0;40m'
BACKRED='\e[0;41m'
BACKGREEN='\e[0;42m'
BACKWHITE='\e[1;47m'
BACKORANGE='\e[0;43m'
BACKBLUE='\e[0;44m'
BACKPURPLE='\e[0;45m'
BACKCYAN='\e[0;46m'
BACKYELLOW='\e[1;43m'

#Lighter Colors
BACKLIGRAY='\e[0;47m'
BACKLIGREEN='\e[1;42m'
BACKLIRED='\e[1;41m'
BACKLIBLUE='\e[1;44m'
BACKLIPURPLE='\e[1;45m'
BACKLICYAN='\e[1;46m'

#Markup Variables
UNDERLINE='\e[4m'
DOUBLEUNDERLINE='\e[21m'
BOLD='\e[1m'
BLINK='\e[5m'
REVERSECOLOR='\e[7m'

# Functions

function pickColor() {
    unset check
    until [ "$check" == "1" ]; do
        echo -en "${WHITE}\n${1}
1.  ${LIBLUE}Light Blue (ANSI)
${WHITE}2.  ${BLUE}Blue (ANSI)
${WHITE}3.  ${LICYAN}Light Cyan (ANSI)
${WHITE}4.  ${CYAN}Cyan (ANSI)
${WHITE}5.  ${LIGREEN}Light Green (ANSI)
${WHITE}6.  ${GREEN}Green (ANSI)
${WHITE}7.  ${YELLOW}Yellow (ANSI)
${WHITE}8.  ${ORANGE}Orange/Brown (ANSI)
${WHITE}9.  ${DARKPEACH}Peachy Orange (RGB)
${WHITE}10. ${LIRED}Light Red (ANSI)
${WHITE}11. ${RED}Red (ANSI)
${WHITE}12. ${LIPURPLE}Light Purple (ANSI)
${WHITE}13. ${PURPLE}Purple (ANSI)
${WHITE}14. Custom color escape code
${LIBLUE}[ 1 â€” 14 ] "
        read Colorvar
        case $Colorvar in
        1)
            export color="${LIBLUE}"
            check="1"
            ;;
        2)
            export color="${BLUE}"
            check="1"
            ;;
        3)
            export color="${LICYAN}"
            check="1"
            ;;
        4)
            export color="${CYAN}"
            check="1"
            ;;
        5)
            export color="${LIGREEN}"
            check="1"
            ;;
        6)
            export color="${GREEN}"
            check="1"
            ;;
        7)
            export color="${YELLOW}"
            check="1"
            ;;
        8)
            export color="${ORANGE}"
            check="1"
            ;;
        9)
            export color="${DARKPEACH}"
            check="1"
            ;;
        10)
            export color="${LIRED}"
            check="1"
            ;;
        11)
            export color="${RED}"
            check="1"
            ;;
        12)
            export color="${LIPURPLE}"
            check="1"
            ;;
        13)
            export color="${PURPLE}"
            check="1"
            ;;
        14)
            check=""
            while [ "$check" != "1" ]; do
                echo -en "Enter your escape code: ${LIBLUE}"
                read -r color
                echo -en "${NC}${color}This is your Prompt color.${WHITE} Is this ok? ${LIBLUE}[Y/n] "
                read promptColorConf
                case $promptColorConf in
                y | Y | Yes | yes | YES | "") check="1" ;;
                *)
                    check=""
                    ;;
                esac
            done
            ;;
        "" | " " | "  ") color="" ;;
        *)
            unset check
            echo -e "\n${LIRED}Error: I couldn't understand that answer, please try again."
            ;;
        esac
        if [ "$3" == "--no-force" ] && [ "$color" == "" ]; then
            check="1"
            return 3
        else
            export "$2"="$color"
        fi

    done
    unset check
}

function renderPrompt() {
    echo $1 > /tmp/showPrompt.styleprompt.txt
    echo $USER > /tmp/user.styleprompt.txt
    echo $PWD > /tmp/pwd.styleprompt.txt
    echo $HOSTNAME > /tmp/hostname.styleprompt.txt
    user="$(cat /tmp/user.styleprompt.txt)"
    pwd="$(cat /tmp/pwd.styleprompt.txt)"
    hostname="$(cat /tmp/hostname.styleprompt.txt)"
    renderedPrompt="$(sed -e "s|!user|${user}|g" -e "s|!pwd|${pwd}|g" -e "s|!hostname|${hostname}|g" /tmp/showPrompt.styleprompt.txt)"
    echo -en $renderedPrompt

}

function loadPrompt() {
    unset lsStartover
    unset check
    until [ "$check" == "1" ]; do
        echo -en "\n${WHITE}What prompt do you want to load?
Answer 'ls' to see all prompts saved in '$path/Saved Prompts/'. ${LIBLUE}"
        read loadWhat
        case $loadWhat in
        ls | LS | Ls | lS)
            echo -e "$DARKPEACH"
            ls "$path/Saved Prompts/"
            lsStartover="214"
            return
            ;;
        *) ;;
        esac
        unset lsStartover
        if [[ "$loadWhat" =~ ".prompt" ]]; then
            loadWhatPath="${path}/Saved Prompts/${loadWhat}"
        else
            loadWhatPath="${path}/Saved Prompts/${loadWhat}.prompt"
        fi
        if ! cat "$loadWhatPath" &>/dev/null; then
            echo -e "\n${LIRED}Error: the specified prompt does not exist, or is unable to be opened!"
            exit 1
        fi
        promptName="$(sed -e '/name/!d' -e '/showPrompt/d' -e 's/name;//' -e 's/'\''//g' "$loadWhatPath")"
        promptType="$(sed -e '/type/!d' -e 's/type;//' -e 's/'\''//g' "$loadWhatPath")"
        showPrompt="$(sed -e '/showPrompt/!d' -e 's/showPrompt;//' -e 's/'\''//g' -e '/stylepromptVer;/d' "$loadWhatPath")"
        prompt="$(sed -e '/prompt/!d' -e '/showPrompt/d' -e 's/prompt;//' -e 's/'\''//g' -e '/stylepromptVer;/d' "$loadWhatPath")"
        stylepromptVer="$(sed -e '/stylepromptVer/!d' -e 's/stylepromptVer;//' -e 's/'\''//g' "$loadWhatPath")"
        echo -e "\n${WHITE}Prompt info:"
        echo -e "Name: ${LIBLUE}${promptName}${WHITE}"
        echo -e "Type: ${LIBLUE}${promptType}${WHITE}"
        echo -en "Prompt: "; renderPrompt "${showPrompt}"
        echo -en "\n${WHITE}Code: ${LIBLUE}"; echo -n "${prompt}"; echo -e "${WHITE}"
        echo
        echo -e "Created with styleprompt version: ${DARKPEACH}${stylepromptVer}${NC}"
        echo -en "\n${WHITE}Do you want to add this prompt to your .bashrc?${LIBLUE} [Y/n] "
        read confAdd
        case $confAdd in
        y | Y | yes | Yes | YES | "")
            if [[ "$(cat $HOME/.bashrc)" =~ "PS1=\"*\" ### Added by styleprompt" ]]; then
                echo -en "\n${WHITE}You already have a styleprompt prompt in your .bashrc. Do you still want to backup your .bashrc? ${LIBLUE}[Y/n] "
                read backConf
                case $backConf in
                y | Y | yes | Yes | YES | "") cp -f "$HOME"/.bashrc "$HOME"/.bashrc.styleprompt.bak ;;
                *) echo -e "${LIBLUE}Ok, I won't backup your .bashrc.${NC}" ;;
                esac
            else
                cp -f "$HOME"/.bashrc "$HOME"/.bashrc.styleprompt.bak
            fi
            tee --append $HOME/.bashrc <<EOF &>/dev/null
PS1="${prompt}" ### Added by styleprompt
EOF
            echo -e "\n${WHITE}To get your new prompt, run \`source $HOME/.bashrc\`"
            check="1"
            ;;
        n | N | no | NO | No | *)
            echo -e "\n${WHITE}Ok, I won't add this prompt to your .bashrc."
            check="1"
            exit 0
            ;;
        esac
    done
}

function revert_prompt() {
    if [[ ! $(cat $HOME/.bashrc) =~ "### Added by styleprompt" ]]; then
        echo -e "\n${LIRED}Error: you don't have any styleprompts to revert!${NC}"
        exit 1
    else
        rm $HOME/.bashrc.styleprompt.new &>/dev/null
        cat $HOME/.bashrc | grep -v styleprompt >$HOME/.bashrc.styleprompt.new
        cat $HOME/.bashrc | grep styleprompt | sed '$d' >>$HOME/.bashrc.styleprompt.new
        mv -f $HOME/.bashrc.styleprompt.new $HOME/.bashrc
        rm $HOME/.bashrc.styleprompt.new &>/dev/null
    fi
}

function delete_all() {
    if [[ ! $(cat $HOME/.bashrc) =~ "### Added by styleprompt" ]]; then
        echo -e "\n${LIRED}Error: you don't have any styleprompts to delete!${NC}"
        exit 1
    else
        echo -en "\n${WHITE}Are you sure you want to delete all styleprompt prompts from your .bashrc? ${LIBLUE}[y/N] "
        read confDel
        case $confDel in
        Y | y | yes | Yes | YES)
            rm $HOME/.bashrc.styleprompt.new &>/dev/null
            sed -e '/PS1=".*" ### Added by styleprompt/d' $HOME/.bashrc >$HOME/.bashrc.styleprompt.new
            rm $HOME/.bashrc &>/dev/null
            mv $HOME/.bashrc.styleprompt.new $HOME/.bashrc
            rm $HOME/.bashrc.styleprompt.new && exit 0
            ;;
        *)
            echo -e "\n${LIBLUE}Ok, I won't delete your prompts.${NC}"
            exit 0
            ;;
        esac
    fi
}


function print_help() {
    echo -e "${WHITE}styleprompt version ${DARKPEACH}$version ${WHITE}| created by ${LICYAN}Crilum
${WHITE}Usage: ${LIBLUE}styleprompt${NC} ${YELLOW}[OPTION]${WHITE}

${YELLOW}-i,${NC} ${YELLOW}--interactive     ${WHITE}starts an interactive session, this is the default option if no option is provided
${YELLOW}-n,${NC} ${YELLOW}--new             ${WHITE}starts an interactive prompt creator
${YELLOW}-l,${NC} ${YELLOW}--load            ${WHITE}loads a saved prompt to $HOME/.bashrc
${YELLOW}-r,${NC} ${YELLOW}--revert          ${WHITE}reverts your prompt to the one used before the current one by deleting the last styleprompt prompt from $HOME/.bashrc
${YELLOW}-D,${NC} ${YELLOW}--delete-all      ${WHITE}this option will delete all your prompts created with styleprompt from $HOME/.bashrc. Be ${DARKPEACH}careful${WHITE} with it!
${YELLOW}-p,${NC} ${YELLOW}--pick-color      ${WHITE}runs the colorPick function, and outputs the escape code for the chosen color
${YELLOW}-v,${NC} ${YELLOW}--version         ${WHITE}prints version
${YELLOW}-h,${NC} ${YELLOW}--help            ${WHITE}shows this help
"
}
